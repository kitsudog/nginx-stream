user  nginx;
worker_processes  auto;

worker_rlimit_nofile 1047552;

worker_shutdown_timeout 240s ;

events {
        multi_accept        on;
        worker_connections  16384;
        use                 epoll;
}

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

http {
  resolver              1.1.1.1 valid=60s ipv6=off;
  include               /etc/nginx/mime.types;
  default_type          application/octet-stream;
  log_format    main    '$remote_addr $http_host $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" [Proxy-pass=$upstream_addr @ $dest_host ${dest_port}] $full_url';

  proxy_cache_path      /var/cache/nginx use_temp_path=off keys_zone=default_cache:10m;
  access_log            /var/log/nginx/access.log  main;
  sendfile              on;
  #tcp_nopush           on;
  charset               'utf-8';
  keepalive_timeout     65;
  # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
  # scheme used to connect to this server
  map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
  }
  # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
  # server port the client connected to
  map $http_x_forwarded_port $proxy_x_forwarded_port {
    default $http_x_forwarded_port;
    ''      $server_port;
  }
  # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
  # Connection header that may have been passed to this server
  map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
  }
  # Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
  map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
    default off;
    https on;
  }
  gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  # HTTP 1.1 support
  proxy_http_version        1.1;
  proxy_buffering           off;
  proxy_set_header          Host $http_host;
  proxy_set_header          Upgrade $http_upgrade;
  proxy_set_header          Connection $proxy_connection;
  proxy_set_header          X-Real-IP $remote_addr;
  proxy_set_header          X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header          X-Forwarded-Proto $proxy_x_forwarded_proto;
  proxy_set_header          X-Forwarded-Ssl $proxy_x_forwarded_ssl;
  proxy_set_header          X-Forwarded-Port $proxy_x_forwarded_port;
  proxy_set_header          Proxy "";
  proxy_buffer_size         128k;
  proxy_buffers             4 256k;
  proxy_busy_buffers_size   256k;

  client_max_body_size      10m;
  client_header_timeout     1m;
  client_body_timeout       1m;
  proxy_connect_timeout     60s;
  proxy_read_timeout        1m;
  proxy_send_timeout        1m;

  server {
    listen 9999;
    location / {
      root /;
    }
  }


  # DEFAULT_FORWARD: http://www.baidu.com:80
  
  
  server {
    listen          80;
    server_name     _;
    access_log      /var/log/nginx/access.log  main;
    set             $dest_port  0;
    
    location        / {
      
      # DEFAULT_JWT_EX: true
      access_by_lua_block {
          local auth_str=ngx.var.http_authorization
          if not auth_str or not auth_str:find("Bearer ") == 1 then
              return
          end
          local jwt_token = auth_str:sub(8)
          local jwt_parts = {}
          for part in jwt_token:gmatch("[^%.]+") do
              table.insert(jwt_parts, part)
          end
          if #jwt_parts ~= 3 then
              return
          end
          local b64 = require "ngx.base64"
          local payload_b64 = jwt_parts[2]
          local payload_json_str = b64.decode_base64url(payload_b64)
          ngx.req.set_header("jwt-user", payload_json_str)
          local jwt_user_sign = jwt_parts[3]
          ngx.req.set_header("jwt-user-sign", string.sub(jwt_user_sign, 1, 3) .. "..." .. #jwt_user_sign)
      }
      
      add_header            FROM        nginx-stream always;
      proxy_set_header      X-FROM      $http_host;
      proxy_set_header      Host        $http_host;
      set                   $dest_host  $http_host;
      set                   $dest_port  80;
      set                   $full_url   "http://www.baidu.com:80";
      proxy_pass            "http://www.baidu.com:80";
      proxy_redirect        default;
      proxy_ssl_server_name on;
      proxy_ssl_name        $http_host;
      proxy_set_header      Upgrade     $http_upgrade;
      proxy_set_header      Connection  $proxy_connection;
    }

    error_page 403 /403.html;
    location = /403.html {
      root /var/www/html;
      internal;
    }
  }


  # UPSTREAM START
  upstream LISTEN_1 {
    # for LISTEN_1=echo.com:httpbin.org/get?
    server httpbin.org:80;
  }

  upstream LISTEN_2 {
    # for LISTEN_2=echo2.com:httpbin.org/get?
    server httpbin.org:80;
  }

  upstream LISTEN_3 {
    # for LISTEN_3=https@www.test.com:www.baidu.com
    server www.baidu.com:443;
  }

  upstream LISTEN_4 {
    # for LISTEN_4=https@www.test2.com:www.baidu.com
    server www.baidu.com:443;
  }

  upstream LISTEN_5 {
    # for LISTEN_5=https@local.bee.com:registry-1.docker.io:443@registry-1.docker.io
    server registry-1.docker.io:443;
  }

  upstream LISTEN_6 {
    # for LISTEN_6=https@qcloud.com:www.baidu.com
    server www.baidu.com:443;
  }

  upstream LISTEN_7 {
    # for LISTEN_7=https@jwt.com:echo.bee.com
    server echo.bee.com:443;
  }

  upstream LISTEN_8 {
    # for LISTEN_8=https@echo3.com/abc:echo.bee.com/
    server echo.bee.com:443;
  }

  upstream LISTEN_9 {
    # for FORWARD_1=www.test3.com:www.baidu.com
    server www.baidu.com:80;
  }

  # UPSTREAM END
  # LISTEN START
  
  # CONFIG LISTEN_1=echo.com:httpbin.org/get? START

  server {
    server_name echo.com;
    set             $dest_port  0;


    # no tls

    listen 80;

    ssl_verify_client off;

    client_max_body_size 100m;
    client_body_buffer_size 10m;



    location /echo {
      proxy_pass http://127.0.0.1:8000/echo;
    }


    location / {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM echo.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "httpbin.org";
      set $full_url               "http://httpbin.org:80/get?";
      proxy_pass                  "http://httpbin.org:80/get?";
      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
      # active cross_domain start
      add_header 'Access-Control-Allow-Origin'      '${http_origin}' always;
      add_header 'Access-Control-Allow-Methods'     'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers'     'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
      add_header 'Access-Control-Expose-Headers'    'Content-Length,Content-Range' always;
      # active cross_domain over
      include "conf.d/echo.com_location";
    }

  }
  # CONFIG LISTEN_1=echo.com:httpbin.org/get? END

  # CONFIG LISTEN_2=echo2.com:httpbin.org/get? START

  server {
    server_name echo2.com;
    set             $dest_port  0;


    # active tls start
    listen 1443 ssl;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_certificate /etc/nginx/certs/nginx.crt;
    ssl_certificate_key /etc/nginx/certs/nginx.key;
    # active tls end

    listen 80;

    ssl_verify_client off;




    location / {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM echo2.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "httpbin.org";
      set $full_url               "http://httpbin.org:80/get?";
      proxy_pass                  "http://httpbin.org:80/get?";
      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG LISTEN_2=echo2.com:httpbin.org/get? END

  # CONFIG LISTEN_3=https@www.test.com:www.baidu.com START

  # EX GATEWAY START
  server {
    server_name www.test.com;

    # no tls

    listen 80;
    ssl_verify_client off;

    location / {
      proxy_set_header        Host ${http_host};
      set                     $dest_host          "#internal-server#";
      set                     $full_url           "http://127.0.0.1:8000/";
      proxy_pass              http://127.0.0.1:8000/;
      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_set_header        Upgrade             $http_upgrade;
      proxy_set_header        Connection          $proxy_connection;
    }
  }
  # EX GATEWAY END

  server {
    server_name www.test.com;
    set             $dest_port  0;

    # real server
    listen 81;

    ssl_verify_client off;




    location / {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM www.test.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "www.baidu.com";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://www.baidu.com:443/";
      proxy_pass                  "https://www.baidu.com:443/";


      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG LISTEN_3=https@www.test.com:www.baidu.com END

  # CONFIG LISTEN_4=https@www.test2.com:www.baidu.com START

  # EX GATEWAY START
  server {
    server_name www.test2.com;

    # active tls start
    listen 1443 ssl;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_certificate /etc/nginx/certs/nginx.crt;
    ssl_certificate_key /etc/nginx/certs/nginx.key;
    # active tls end

    listen 80;
    ssl_verify_client off;

    location / {
      proxy_set_header        Host ${http_host};
      set                     $dest_host          "#internal-server#";
      set                     $full_url           "http://127.0.0.1:8000/";
      proxy_pass              http://127.0.0.1:8000/;
      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_set_header        Upgrade             $http_upgrade;
      proxy_set_header        Connection          $proxy_connection;
    }
  }
  # EX GATEWAY END

  server {
    server_name www.test2.com;
    set             $dest_port  0;

    # real server
    listen 81;

    ssl_verify_client off;




    location / {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM www.test2.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "www.baidu.com";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://www.baidu.com:443/";
      proxy_pass                  "https://www.baidu.com:443/";


      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG LISTEN_4=https@www.test2.com:www.baidu.com END

  # CONFIG LISTEN_5=https@local.bee.com:registry-1.docker.io:443@registry-1.docker.io START

  server {
    server_name local.bee.com;
    set             $dest_port  0;


    # active tls start
    listen 1443 ssl;
    ssl_session_timeout 5m;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_certificate /etc/nginx/certs/bee.com.crt;
    ssl_certificate_key /etc/nginx/certs/bee.com.key;
    # active tls end

    listen 80;

    ssl_verify_client off;




    location / {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM local.bee.com;
      proxy_set_header            Host registry-1.docker.io;
      set $dest_host              "registry-1.docker.io";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://registry-1.docker.io:443/";
      proxy_pass                  "https://registry-1.docker.io:443/";


      # active cache start
      proxy_buffering         on;
      proxy_cache             default_cache;
      proxy_cache_key         $proxy_host$uri;
      proxy_cache_valid       200 30d;
      proxy_cache_valid       404 1m;
      add_header              X-Proxy-Cache   $upstream_cache_status always;
      # active cache end

      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          registry-1.docker.io;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG LISTEN_5=https@local.bee.com:registry-1.docker.io:443@registry-1.docker.io END

  # CONFIG LISTEN_6=https@qcloud.com:www.baidu.com START


  # GEO START
  geo $http_x_forwarded_for $user_type_6 {
    default              ban;
    10.0.0.0/8           white;
    127.0.0.1            ban;
  }
  # GEO END
  server {
    server_name qcloud.com;
    set             $dest_port  0;


    # no tls

    listen 80;

    ssl_verify_client off;


    # HEADER START
    add_header env        "123" always;
    add_header env2       "123" always;
    # HEADER END

    location @custom {
      add_header      env         "black" always;
      set             $dest_host  $http_host;
      set             $full_url   "#ban-302#";
      return          302         "https://www.163.com";
    }


    location / {
      


      if ($user_type_6 = ban) {
        return 403;
      }
      error_page                  403 = @custom;

      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM qcloud.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "www.baidu.com";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://www.baidu.com:443/";
      proxy_pass                  "https://www.baidu.com:443/";


      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG LISTEN_6=https@qcloud.com:www.baidu.com END

  # CONFIG LISTEN_7=https@jwt.com:echo.bee.com START

  server {
    server_name jwt.com;
    set             $dest_port  0;


    # no tls

    listen 80;

    ssl_verify_client off;




    location / {
      
      access_by_lua_block {
        local auth_str=ngx.var.http_authorization
        if not auth_str or not auth_str:find("Bearer ") == 1 then
            return
        end
        local jwt_token = auth_str:sub(8)
        local jwt_parts = {}
        for part in jwt_token:gmatch("[^%.]+") do
            table.insert(jwt_parts, part)
        end
        if #jwt_parts ~= 3 then
            return
        end
        local b64 = require "ngx.base64"
        local payload_b64 = jwt_parts[2]
        local payload_json_str = b64.decode_base64url(payload_b64)
        ngx.req.set_header("jwt-user", payload_json_str)
        local jwt_user_sign = jwt_parts[3]
        ngx.req.set_header("jwt-user-sign", string.sub(jwt_user_sign, 1, 3) .. "..." .. #jwt_user_sign)
    }
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM jwt.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "echo.bee.com";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://echo.bee.com:443/";
      proxy_pass                  "https://echo.bee.com:443/";


      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG LISTEN_7=https@jwt.com:echo.bee.com END

  # CONFIG LISTEN_8=https@echo3.com/abc:echo.bee.com/ START

  server {
    server_name echo3.com;
    set             $dest_port  0;


    # no tls

    listen 80;

    ssl_verify_client off;




    location /abc {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM echo3.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "echo.bee.com";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://echo.bee.com:443/";
      proxy_pass                  "https://echo.bee.com:443/";


      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

    location /123 {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM echo3.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "echo.bee.com";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://echo.bee.com:443/";
      proxy_pass                  "https://echo.bee.com:443/";


      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

    location / {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM echo3.com;
      proxy_set_header            Host $proxy_host;
      set $dest_host              "echo.httpbin.com";
      proxy_set_header            X-Forwarded-Proto https;

      set $full_url               "https://echo.httpbin.com:443/get?";
      proxy_pass                  "https://echo.httpbin.com:443/get?";


      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $proxy_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG LISTEN_8=https@echo3.com/abc:echo.bee.com/ END

  # CONFIG FORWARD_1=www.test3.com:www.baidu.com START

  server {
    server_name www.test3.com;
    set             $dest_port  0;


    # no tls

    listen 80;

    ssl_verify_client off;




    location / {
      


      add_header                  FROM   nginx-stream always;
      proxy_set_header            X-FROM www.test3.com;
      proxy_set_header            Host $http_host;
      set $dest_host              "www.baidu.com";
      set $full_url               "http://www.baidu.com:80/";
      proxy_pass                  "http://www.baidu.com:80/";
      proxy_redirect          default;
      proxy_ssl_server_name   on;
      proxy_ssl_name          $http_host;
      proxy_set_header        Upgrade     $http_upgrade;
      proxy_set_header        Connection  $proxy_connection;
    }

  }
  # CONFIG FORWARD_1=www.test3.com:www.baidu.com END

  # LISTEN END
  # REDIRECT START
  
  server {
    listen      80;
    server_name baidu.games;
    location / {
      set $full_url   "https://www.baidu.com$request_uri";
      set $dest_host  "#REDIRECT#";
      return 302      "https://www.baidu.com$request_uri";

    }
  }
  server {
    listen      80;
    server_name mode2.baidu.games;
    location / {
      set $full_url   "https://www.baidu.com/";
      set $dest_host  "#REDIRECT-DOMAIN#";
      return 302      "https://www.baidu.com/";
    }
  }
  server {
    listen      80;
    server_name mode3.baidu.games;
    location /test1 {
      add_header    Content-Type    text/html;
      set           $full_url       "#REDIRECT-WITH-HASH#";
      set           $dest_host      "#REDIRECT-WITH-HASH#";
      return 200 '<html lang="en"><head><title>redirect</title></head><body><script type="text/javascript">window.location.href="https://www.baidu.com" + location.pathname.replace(/^\/test1/, "/") + location.search + location.hash;</script></body></html>';
    }
    location /test2/ {
      rewrite ^/test2/(.*)$ https://www.163.com/$1 break;
      

    }
    location /test3/ {
      set $full_url   "https://www.sina.com$request_uri";
      set $dest_host  "#REDIRECT#";
      return 302      "https://www.sina.com$request_uri";

    }
  }
  # REDIRECT END
}
stream {
  log_format proxy          '$remote_addr [$time_local] '
                            '$protocol $status $bytes_sent $bytes_received '
                            '$session_time -> $upstream_addr '
                            '$upstream_bytes_sent $upstream_bytes_received $upstream_connect_time';
  access_log                /dev/stdout proxy buffer=32k;
  open_log_file_cache       off;
  resolver                  1.1.1.1 valid=60s ipv6=off;

  # HTTPS TUNNEL START
  map $ssl_preread_server_name $backend_name {
    rpc.ankr.com tunnel_1;
    www.baidu.com tunnel_2;
  }

  upstream tunnel_1 {
    server rpc.ankr.com:443;
  }

  upstream tunnel_2 {
    server www.baidu.com:443;
  }

  server {
    listen      443;
    proxy_pass  $backend_name;
    ssl_preread on;
  }
  # HTTPS TUNNEL END

  # STREAM START
  server {
    listen                  8080;
    proxy_connect_timeout   3s;
    proxy_timeout           3600s;
    proxy_pass              www.baidu.com:443;
  }

  server {
    listen                  53 udp;
    proxy_connect_timeout   3s;
    proxy_timeout           3600s;
    proxy_pass              1.1.1.1:53;
  }

  server {
    listen                  53;
    proxy_connect_timeout   3s;
    proxy_timeout           3600s;
    proxy_pass              1.1.1.1:53;
  }
# STREAM END
}